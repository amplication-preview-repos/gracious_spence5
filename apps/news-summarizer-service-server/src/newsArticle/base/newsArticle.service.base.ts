/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NewsArticle as PrismaNewsArticle } from "@prisma/client";

export class NewsArticleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsArticleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsArticle.count(args);
  }

  async newsArticles<T extends Prisma.NewsArticleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewsArticleFindManyArgs>
  ): Promise<PrismaNewsArticle[]> {
    return this.prisma.newsArticle.findMany<Prisma.NewsArticleFindManyArgs>(
      args
    );
  }
  async newsArticle<T extends Prisma.NewsArticleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewsArticleFindUniqueArgs>
  ): Promise<PrismaNewsArticle | null> {
    return this.prisma.newsArticle.findUnique(args);
  }
  async createNewsArticle<T extends Prisma.NewsArticleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewsArticleCreateArgs>
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.create<T>(args);
  }
  async updateNewsArticle<T extends Prisma.NewsArticleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewsArticleUpdateArgs>
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.update<T>(args);
  }
  async deleteNewsArticle<T extends Prisma.NewsArticleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewsArticleDeleteArgs>
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.delete(args);
  }
}
